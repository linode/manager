import { regionFactory } from '@linode/utilities';
import {
  clusterPlans,
  latestEnterpriseTierKubernetesVersion,
  latestKubernetesVersion,
  mockedLKEClusterTypes,
  mockedLKEEnterprisePrices,
} from 'support/constants/lke';
import { mockGetAccount } from 'support/intercepts/account';
import { mockAppendFeatureFlags } from 'support/intercepts/feature-flags';
import { mockGetLinodeTypes } from 'support/intercepts/linodes';
import {
  mockCreateCluster,
  mockCreateClusterError,
  mockGetKubernetesVersions,
  mockGetLKEClusterTypes,
  mockGetTieredKubernetesVersions,
} from 'support/intercepts/lke';
import { mockGetRegions } from 'support/intercepts/regions';
import { mockGetVPCs } from 'support/intercepts/vpc';
import { ui } from 'support/ui';
import { randomLabel } from 'support/util/random';

import {
  accountFactory,
  kubernetesClusterFactory,
  subnetFactory,
  vpcFactory,
} from 'src/factories';

describe('LKE Cluster Creation with LKE-E', () => {
  describe('LKE-E Phase 2 Networking Configurations', () => {
    const clusterLabel = randomLabel();
    const selectedVpcId = 1;
    const selectedSubnetId = 1;

    const mockEnterpriseCluster = kubernetesClusterFactory.build({
      k8s_version: latestEnterpriseTierKubernetesVersion.id,
      label: clusterLabel,
      region: 'us-iad',
      tier: 'enterprise',
    });

    const mockVpcs = [
      {
        ...vpcFactory.build(),
        id: selectedVpcId,
        label: 'test-vpc',
        region: 'us-iad',
        subnets: [
          subnetFactory.build({
            id: selectedSubnetId,
            label: 'subnet-a',
            ipv4: '10.0.0.0/13',
          }),
        ],
      },
    ];

    const mockErrorMessage =
      'Cannot create LKE-E cluster in existing VPC with IPv4 stack';

    // Accounts for the different combination of IP Networking and VPC/Subnet radio selections.
    const possibleNetworkingConfigurations = [
      {
        description:
          'Successfully creates cluster with auto-generated VPC and IPv4+IPv6 stack',
        isUsingOwnVPC: false,
        stackType: 'ipv4-ipv6',
        shouldError: false,
      },
      {
        description:
          'Successfully creates cluster with auto-generated VPC and IPv4 stack',
        isUsingOwnVPC: false,
        stackType: 'ipv4',
        shouldError: false,
      },
      // TODO: debug these - the VPC selection isn't enabled and the request isn't firing, something not mocked right
      // {
      //   description:
      //     'Successfully creates cluster with existing (BYO) VPC and IPv4+IPv6 stack',
      //   isUsingOwnVPC: true,
      //   stackType: 'ipv4-ipv6',
      //   shouldError: false,
      // },
      // {
      //   description:
      //     'Failures to create cluster with existing (BYO) VPC and IPv4 stack (should fail)',
      //   isUsingOwnVPC: true,
      //   stackType: 'ipv4',
      //   shouldError: true,
      // },
    ];

    beforeEach(() => {
      // TODO LKE-E: Remove feature flag mocks once we're in GA
      mockAppendFeatureFlags({
        lkeEnterprise: {
          enabled: true,
          la: true,
          postLa: false,
          phase2Mtc: true,
        },
      }).as('getFeatureFlags');
      mockGetAccount(
        accountFactory.build({
          capabilities: ['Kubernetes Enterprise'],
        })
      ).as('getAccount');

      mockGetTieredKubernetesVersions('enterprise', [
        latestEnterpriseTierKubernetesVersion,
      ]).as('getTieredKubernetesVersions');
      mockGetKubernetesVersions([latestKubernetesVersion]).as(
        'getKubernetesVersions'
      );

      mockGetLinodeTypes(mockedLKEClusterTypes).as('getLinodeTypes');
      mockGetLKEClusterTypes(mockedLKEEnterprisePrices).as(
        'getLKEEnterpriseClusterTypes'
      );

      mockGetRegions([
        regionFactory.build({
          capabilities: ['Linodes', 'Kubernetes', 'Kubernetes Enterprise'],
          id: 'us-iad',
          label: 'Washington, DC',
        }),
      ]).as('getRegions');

      mockGetVPCs(mockVpcs).as('getVPCs');

      cy.visitWithLogin('/kubernetes/clusters');
      cy.wait(['@getAccount']);

      ui.button.findByTitle('Create Cluster').click();
      cy.url().should('endWith', '/kubernetes/create');
      cy.wait([
        '@getKubernetesVersions',
        '@getTieredKubernetesVersions',
        '@getLinodeTypes',
      ]);
    });

    possibleNetworkingConfigurations.forEach(
      ({ description, isUsingOwnVPC, stackType, shouldError }) => {
        it(`${description}`, () => {
          // Select the enterprise tier and available region
          cy.findByLabelText('Cluster Label').type(clusterLabel);
          cy.findByText('LKE Enterprise').click();

          cy.wait(['@getLKEEnterpriseClusterTypes', '@getRegions']);

          ui.regionSelect.find().clear().type('Washington, DC{enter}');

          // Select either the autogenerated or existing (BYO) VPC radio button
          if (isUsingOwnVPC) {
            cy.findByTestId('isUsingOwnVpc').within(() => {
              cy.findByLabelText('Use an existing VPC').click();
            });
            cy.wait('@getVPCs');

            // Select the existing VPC and Subnet to use
            ui.autocomplete.findByLabel('VPC').click();
            cy.findByText('test-vpc').click();
            ui.autocomplete.findByLabel('Subnet').click();
            cy.findByText(/subnet-a/).click();
          }

          // Select either the IPv4 or Dual Stack (IPv4+IPv6) IP Networking radio button
          cy.findByLabelText(
            stackType === 'ipv4' ? 'IPv4' : 'IPv4 + IPv6'
          ).click();

          // Select a plan and add nodes
          cy.findByText(clusterPlans[0].tab).should('be.visible').click();
          cy.findByText(clusterPlans[0].planName)
            .should('be.visible')
            .closest('tr')
            .within(() => {
              cy.get('[name="Quantity"]').should('be.visible').click();
              cy.focused().type(`{selectall}${clusterPlans[0].nodeCount}`);

              ui.button
                .findByTitle('Add')
                .should('be.visible')
                .should('be.enabled')
                .click();
            });

          // Bypass ACL validation error
          cy.get('input[name="acl-acknowledgement"]').check();

          // Mock an error response for an invalid configuration; else, mock success response
          if (shouldError) {
            mockCreateClusterError(mockErrorMessage, 400).as(
              'createClusterError'
            );
          } else {
            mockCreateCluster(mockEnterpriseCluster).as('createCluster');
          }

          // Create LKE cluster
          cy.get('[data-testid="kube-checkout-bar"]')
            .should('be.visible')
            .within(() => {
              ui.button
                .findByTitle('Create Cluster')
                .should('be.visible')
                .should('be.enabled')
                .click();
            });

          // Confirm the error for an invalid configuration; else, confirm payload
          if (shouldError) {
            cy.wait('@createClusterError');
            // Confirm the error is surfaced in the UI
            cy.contains(
              'Cannot create LKE-E cluster in existing VPC with IPv4 stack'
            ).should('be.visible');
          } else {
            cy.wait('@createCluster').then((intercept) => {
              const payload = intercept.request.body;

              expect(payload.stack_type).to.eq(stackType);
              // Confirm existing (BYO) VPC selection passes the vpc_id and subnet_id;
              // else, confirm undefined is passed for an autogenerated VPC
              if (isUsingOwnVPC) {
                expect(payload.vpc_id).to.eq(selectedVpcId);
                expect(payload.subnet_id).to.eq(selectedSubnetId);
              } else {
                expect(payload.vpc_id).to.be.undefined;
                expect(payload.subnet_id).to.be.undefined;
              }
            });
          }
        });
      }
    );
  });
});
