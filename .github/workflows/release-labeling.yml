name: Auto-label PR with next release date

permissions:
  pull-requests: write

on:
  pull_request:
    types: [opened]
    branches:
      - develop

env:
  # Use GitHub secrets for date configuration
  RELEASE_START: ${{ secrets.RELEASE_START_DATE }}
  FREEZE_START_1: ${{ secrets.FREEZE_START_1_DATE }}
  FREEZE_END_1: ${{ secrets.FREEZE_END_1_DATE }}
  FREEZE_START_2: ${{ secrets.FREEZE_START_2_DATE }}
  FREEZE_END_2: ${{ secrets.FREEZE_END_2_DATE }}

jobs:
  add-release-label:
    name: Add Release Label
    runs-on: ubuntu-latest
    steps:
      - name: Calculate next release date
        id: calculate_date
        run: |
          # Function to adjust date to next Tuesday if needed
          adjust_to_tuesday() {
            local input_date="$1"
            local day_of_week=$(date -d "$input_date" +%u)
            if [ $day_of_week -ne 2 ]; then
              local days_to_add=$(( (2 - $day_of_week + 7) % 7 ))
              date -d "$input_date + $days_to_add days" +%Y-%m-%d
            else
              echo "$input_date"
            fi
          }

          TODAY=$(date +%Y-%m-%d)

          # Calculate which release cycle we're in (releases every 14 days)
          DAYS_SINCE_START=$(( ($(date -d "$TODAY" +%s) - $(date -d "$RELEASE_START" +%s)) / 86400 ))

          if [ $DAYS_SINCE_START -lt 0 ]; then
            NEXT_RELEASE_DATE="$RELEASE_START"
          else
            CYCLES_PASSED=$(( $DAYS_SINCE_START / 14 ))
            NEXT_CYCLE=$(( $CYCLES_PASSED + 1 ))
            NEXT_RELEASE_DATE=$(date -d "$RELEASE_START + $(( $NEXT_CYCLE * 14 )) days" +%Y-%m-%d)
          fi

          # Pre-calculate freeze period timestamps for efficiency
          FREEZE1_START_TS=$(date -d "$FREEZE_START_1" +%s)
          FREEZE1_END_TS=$(date -d "$FREEZE_END_1" +%s)
          FREEZE2_START_TS=$(date -d "$FREEZE_START_2" +%s)
          FREEZE2_END_TS=$(date -d "$FREEZE_END_2" +%s)

          # Skip freeze periods - if calculated date falls during freeze,
          # jump to first Tuesday after freeze ends
          RELEASE_TIMESTAMP=$(date -d "$NEXT_RELEASE_DATE" +%s)

          # Check if calculated release date falls during December freeze (Dec 2-15)
          if [ $RELEASE_TIMESTAMP -ge $FREEZE1_START_TS ] && [ $RELEASE_TIMESTAMP -le $FREEZE1_END_TS ]; then
            # Skip freeze period: move to day after freeze ends, then find next Tuesday
            NEXT_RELEASE_DATE=$(date -d "$FREEZE_END_1 + 1 day" +%Y-%m-%d)
            NEXT_RELEASE_DATE=$(adjust_to_tuesday "$NEXT_RELEASE_DATE")
          fi

          # Check if calculated release date falls during year-end freeze (Dec 30-Jan 6)
          if [ $RELEASE_TIMESTAMP -ge $FREEZE2_START_TS ] && [ $RELEASE_TIMESTAMP -le $FREEZE2_END_TS ]; then
            # Skip freeze period: move to day after freeze ends, then find next Tuesday
            NEXT_RELEASE_DATE=$(date -d "$FREEZE_END_2 + 1 day" +%Y-%m-%d)
            NEXT_RELEASE_DATE=$(adjust_to_tuesday "$NEXT_RELEASE_DATE")
          fi

          echo "date=$NEXT_RELEASE_DATE" >> $GITHUB_OUTPUT

      - name: Add release label to PR
        uses: actions/github-script@v4
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: [`release:${{ steps.calculate_date.outputs.date }}`]
            });