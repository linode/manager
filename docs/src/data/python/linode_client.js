module.exports = {"name":"LinodeClient","import":"from linode import LinodeClient","desc":"The <code>LinodeClient</code> class is responsible for communicating with https://api.linode.com\n","methods":[{"desc":"Retrieves a list of Datacenter objects.  This function is filterable - include filters in the parameters list to retrieve only specific objects.\n","parameters":{"*filters":{"desc":"Any number of filters to this function","_keyword":false}},"example":"dc = client.get_datacenters(linode.Datacenter.label.contains(\"Newark\"))[0]\n","returns":"A list of Datacenter objects","name":"get_datacenters"}],"groups":{"linode":{"name":"Linode","desc":"Includes all methods for accessing and creating resources related to Linodes.\n","methods":{"get_distributions":{"desc":"Retrieves a list of Distribution objects.  This function is filterable - include fitlers in the parameters list to retrieve only specific objects.\n","parameters":{"*filters":{"desc":"Any number of filters to this function","_keyword":false}},"example":"distros = client.linode.get_distributions(linode.Distribution.vendor == \"Debian\")\n","returns":"A list of Distribution objects"},"get_services":{"desc":"Retrieves a list of Service objects.  This function is filterable - include filters in the parameters list to retrieve only specific objects.\n","parameters":{"*filters":{"desc":"Any number of filters to this function","_keyword":false}},"example":"service = client.linode.get_services(linode.Services.label == \"Linode 1024\")[0]\n","returns":"A list of Service objects"},"get_instances":{"desc":"Retrives a list of Linode objects.  This function is filterable - include filters in the parameters list to retrieve only specific objects.\n","parameters":{"*filters":{"desc":"Any number of filters to this function","_keyword":false}},"example":"linodes = client.linode.get_linodes(linode.Linode.group == \"production\")\n","returns":"A list of Linode objects"},"get_stackscripts":{"desc":"Retrieves a list of StackScript objects.  This function is filterable - include filters in the parameters list to retrieve only specific objects.\n","parameters":{"*filters":{"desc":"Any number of filters to this function","_keyword":false}},"example":"stackscripts = client.linode.get_stackscripts()\n","returns":"A list of StackScript objects"},"get_kernels":{"desc":"Retrieves a list of Kernel objects.  This function is filterable - include filters in the parameters list to retrieve only specific objects.\n","parameters":{"*filters":{"desc":"Any number of filters to this function","_keyword":false}},"example":"kernels = client.linode.get_kernels(linode.Kernel.kvm == True)\n","returns":"A list of Kernel objects"}},"create_instance":{"desc":"Creates a new Linode object.  Requires the <code>OAuthScopes.Linodes.create</code> scope.\n","parameters":{"service":{"desc":"A Service object which represents the Linode plan to create.  Must be a Linode service.","_keyword":false},"datacenter":{"desc":"A Datacenter object which is the datacenter in which this Linode will be created","_keyword":false}},"example":"serv = client.linode.get_services(linode.Service.label == 'Linode 1024')[0]\ndc = client.get_datacenters(linode.Datacenter.label.contains('Newark'))[0]\nl = client.create_linode(serv, dc)\n","returns":"A Linode object"},"create_instance*":{"desc":"Creates a new Linode object and deploys a Distribution to it.  Requires <code>OAuthScopes.Linodes.create</code> scope.\n","parameters":{"service":{"desc":"A Service object which represents the Linode plan to create.  Must be a Linode service.","_keyword":false},"datacenter":{"desc":"A Datacenter object which is the datacenter in which this Linode will be created","_keyword":false},"source":{"desc":"A Distribution object to deiploy to this Linode.\n","_keyword":true,"_default":"None"},"**kwargs":{"desc":"Any number of additional keyword arguments to pass to the POST /linodes endpoint.  These depend on the source parameter's value.  See the <a href=\"/reference/#ep-linodes-POST\">endpoint docs</a> for more information.\n","_keyword":false}},"example":"serv = client.linode.get_services(linode.Service.label == 'Linode 1024')[0]\ndc = client.get_datacenters(linode.Datacenter.label.contains('Newark'))[0]\ndistro = client.linode.get_distributions(linode.Distribution.vendor == 'Debian')[-1]\nl = client.create_linode(serv, dc, source=distro)\n","returns":"A tuple containing the new Linode object and generated root password for the Linode"},"create_instance**":{"desc":"Creates a new Linode object from a StackScript.  Requires the <code>OAuthScopes.Linodes.create</code> scope.\n","parameters":{"service":{"desc":"A Service object which represents the Linode plan to create.  Must be a Linode service.","_keyword":false},"datacenter":{"desc":"A Datacenter object which is the datacenter in which this Linode will be created","_keyword":false},"stackscript_id":{"desc":"The StackScript to deploy this Linode with.\n","_keyword":true,"_default":"None"},"stackscript_udf_responses":{"desc":"A dict containing values for all StackScript user-defined fields.\n","_keyword":true,"_default":"None"},"source":{"desc":"The Distribution to deploy to this Linode.  Must be a Distribution the given StackScript supports.\n","_keyword":true,"_default":"None"},"**kwargs":{"desc":"Any number of additional keyword arguments to pass to the POST /linodes endpoint.  These depend on the source parameter's value.  See the <a href=\"/reference/#ep-linodes-POST\">endpoint docs</a> more information.\n","_keyword":false}},"example":"serv = client.linode.get_services(linode.Service.label == 'Linode 1024')[0]\ndc = client.get_datacenters(linode.Datacenter.label.contains('Newark'))[0]\ndistro = client.linode.get_distributions(linode.Distribution.vendor == 'Debian')[-1]\nstackscirpt = linode.StackScript(client, 'stackscript_123')\nl = client.create_linode(serv, dc, source=distro, stackscript_id=stackscript.id)\n","returns":"A Linode object"},"create_stackscript":{"desc":"Creates a StackScript object.  Requirs the <code>OAuthScopes.StackScripts.create</code> scope.\n","parameters":{"label":{"desc":"The label for this StackScript","_keyword":false},"script":{"desc":"Either the script in its entirety, or a path to a file containing the script","_keyword":false},"distros":{"desc":"Either one or a list of Distribution objects this StackScript runs on","_keyword":false},"desc":{"desc":"The description of this StackScrip","_keyword":true,"_default":"None"},"public":{"desc":"Whether or not this StackScript should be public","_keyword":true,"_default":"False"},"**kwargs":{"desc":"Any number of additional keyword arguments to pass to the POST /stackscripts endpoint.  For more information, see the <a href=\"/reference/#ep-stackscripts-POST\">endpoint docs</a> for complete breakdown.\n","_keyword":false}},"example":"distros = client.linode.get_distributions(linode.or_(linode.Distribution.vendor == 'Ubuntu', linode.Distribution.vendor == 'Debian'))\ns = client.create_stackscript('my-stackscript', '~/stackscripts/my-stackscript.sh', distros)\n"}},"dns":{"name":"Dns","desc":"All methods for accessing and creating Dns-related resources\n","methods":{"get_zones":{"desc":"Retrieves a list of DNS Zone objects.  This function is filterable - include filters in the parameters list to retrieve only specific objects.\n","parameters":{"*filters":{"desc":"Any number of filters to this function","_keyword":false}},"example":"dnszones = client.dns.get_zones()\n","returns":"A list of DNS Zone objects"},"create_zone":{"desc":"Creates a new DNS Zone record.","parameters":{"dnszone":{"desc":"The DNS zone we are managing","_keyword":false},"master":{"desc":"Is this the master DNS zone record?","_keyword":true,"_default":"True"},"**kwargs":{"desc":"Any number of additional keyword arguments to pass to the POST /dnszones endpoint.  For more information, see the <a href=\"/reference/#ep-dnszones-POST\">endpoint docs</a> for complete breakdown.\n","_keyword":false}},"example":"z = client.create_dnszone('example.org')\n"}}}},"endpoints":null};