# vim: set et ts=2 sw=2 tw=80 :
name: Networking
sort: 1
base_path: /networking
description: >
  Networking endpoints provide a means of viewing <a href="#object-networking">
  networking objects</a>.
endpoints:
  networking/ipv4:
    type: list
    authenticated: true
    description: >
      View and manage IPv4 Addresses you own.
    methods:
      GET:
        oauth: ips:view
        description: >
          Returns a list of <a href="#object-ipaddress">IPv4 Addresses</a>
        examples:
          curl: |
            curl -H "Authorization: token $TOKEN" \
              https://$api_root/$version/networking/ipv4
          python: |
            my_ipv4s = client.networking.get_ipv4()
      POST:
        money: true
        oauth: ips:create
        description: >
          Create a new Public <a href="#object-ipaddress">IPv4 Address</a>
        params:
          linode:
            description: >
              The Linode ID to assign this IP to.
            type: int
        examples:
          curl: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: token $TOKEN" \
                -X POST -d '{"linode":123}' \
                https://$api_root/$version/networking/ipv4
          python: |
            # presently unsupported
  networking/ipv4/:address:
    type: resource
    authenticated: true
    description: >
      Manage a single <a href="#object-ipaddress">IPv4 Address</a>
    methods:
      GET:
        oauth: ips:get
        description: >
            Returns a single <a href="#object-ipaddress">IPv4 Address</a>
        examples:
            curl: |
              curl -H "Authorization: token $TOKEN" \
                https://$api_root/$version/networking/ipv4/97.107.143.37
            python: |
              my_ipv4 = linode.IPAddress(client, '97.107.143.37')
      PUT:
        oauth: ips:modify
        description: >
            Update RDNS on one <a href="#object-ipaddress">IPv4 Address</a>.  Set RDNS to null to reset.
        examples:
          curl: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: token $TOKEN" \
                -X PUT -d '{"rdns":"example.org"}' \
                https://$api_root/$version/networking/ipv4/97.107.143.37
          python: |
            my_ipv4.rdns = 'example.org'
            my_ipv4.save()
  networking/ipv6:
    type: list
    authenticated: true
    description: >
      Manage <a href="#object-ipv6pool">IPv6 Global Pools</a>.
    methods:
      GET:
        oauth: ips:view
        description: >
          Returns a list of <a href="#object-ipv6pool">IPv6 Pools</a>.
        examples:
          curl: |
            curl -H "Authorization: token $TOKEN" \
                https://$api_root/$version/networking/ipv6
          python: |
            my_ipv6s = client.networking.get_ipv6()
  networking/ipv6/:address:
    type: resource
    authenticated: true
    description: >
      Manage a single <a href="#object-ipv6-address">IPv6 Address</a>.  Address in URL
      can be as compressed as you want.
    methods:
      GET:
        oauth: ips:view
        description: >
          Return a single <a href="#object-ipv6-address">IPv6 Address</a>.
        examples:
          curl: |
            curl -H "Authorization: token $TOKEN" \
                https://$api_root/$version/networkint/ipv6/2600:3c01::2:5001
          python: |
            my_ipv6 = linode.IPv6Address(client, '2600:3c01::2:5001')
      PUT:
        oauth: ips:modify
        description: >
          Set RDNS on a single <a href="#object-ipv6-address">IPv6 Address</a>.
        examples:
          curl: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: token $TOKEN" \
                -X PUT -d '{"rdns":"example.org"}' \
                https://$api_root/$version/networking/ipv6/2600:3c01::2:5001
          python: |
            my_ipv6.rdns = 'example.org'
            my_ipv6.save()
  networking/ip-assign:
    type: strange
    authenticated: true
    description: >
      Assigns an IPv4 address to a Linode.
    methods:
      POST:
        oauth: linodes:access
        dangerous: true
        params:
          region:
            description: >
              The <a href="#object-region">region</a> where the IPv4 address
              and Linode are located.
            type: region
          assignments:
            description: >
              An array of IPv4 addresses and the Linode IDs they will be assigned to
            type: array
        examples:
          curl: |
            curl -H "Content-Type: application/json" \
                -H "Authorization: token $TOKEN" \
                -X POST -d '{
                    "region": "us-east-1a",
                    "assignments": [
                      {"address": "210.111.22.95", "linode_id": 134504},
                      {"address": "190.12.207.11", "linode_id": 119034},
                    ]
                }' \
            https://$api_root/$version/networking/ip-assign
          python: |
            linode_1 = linode.Linode(client, 134504)
            ip1 = linode_1.ips.ipv4.public[0]

            linode_2 = linode.Linode(client, 119034)
            ip2 = linode_2.ips.ipv4.public[0]

            client.networking.assign_ips(linode_1.region, ip1.to(linode_2), ip2.to(linode_1))
