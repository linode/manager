// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`nodebalancers/nodebalancer/configs/layouts/DashboardPage should render without error 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NodeBalancerConfigDashboard
    config={
      Object {
        "_nodes": Object {
          "nodes": Object {
            "1": Object {
              "address": "192.168.4.5:80",
              "config_id": 0,
              "id": 1,
              "label": "greatest_node_ever",
              "mode": "accept",
              "nodebalancer_id": 23,
              "status": "online",
              "weight": 40,
            },
          },
        },
        "algorithm": "roundrobin",
        "check": "none",
        "check_attempts": 3,
        "check_body": "",
        "check_interval": 0,
        "check_passive": true,
        "check_path": "",
        "check_timeout": 30,
        "cipher_suite": "recommended",
        "id": 1,
        "nodebalancer_id": 23,
        "nodes_status": Object {
          "down": 0,
          "up": 1,
        },
        "port": 80,
        "protocol": "http",
        "stickiness": "none",
      }
    }
    nodebalancer={
      Object {
        "_configs": Object {
          "configs": Object {
            "1": Object {
              "_nodes": Object {
                "nodes": Object {
                  "1": Object {
                    "address": "192.168.4.5:80",
                    "config_id": 0,
                    "id": 1,
                    "label": "greatest_node_ever",
                    "mode": "accept",
                    "nodebalancer_id": 23,
                    "status": "online",
                    "weight": 40,
                  },
                },
              },
              "algorithm": "roundrobin",
              "check": "none",
              "check_attempts": 3,
              "check_body": "",
              "check_interval": 0,
              "check_passive": true,
              "check_path": "",
              "check_timeout": 30,
              "cipher_suite": "recommended",
              "id": 1,
              "nodebalancer_id": 23,
              "nodes_status": Object {
                "down": 0,
                "up": 1,
              },
              "port": 80,
              "protocol": "http",
              "stickiness": "none",
            },
            "2": Object {
              "algorithm": "roundrobin",
              "check": "none",
              "check_attempts": 3,
              "check_body": "",
              "check_interval": 0,
              "check_passive": true,
              "check_path": "",
              "check_timeout": 30,
              "cipher_suite": "recommended",
              "id": 2,
              "nodebalancer_id": 23,
              "nodes_status": Object {
                "down": 0,
                "up": 0,
              },
              "port": 81,
              "protocol": "http",
              "stickiness": "none",
            },
          },
        },
        "client_conn_throttle": 0,
        "created": "2017-03-03T18:08:44",
        "hostname": "nb-1-1-1-1.newark.nodebalancer.linode.com",
        "id": 23,
        "ipv4": "1.1.1.1",
        "label": "nodebalancer-1",
        "region": "us-east-1a",
        "status": "new_active",
        "updated": "2017-03-06T22:00:48",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <section>
          <Card
            className=""
            header={
              <CardHeader
                title="Summary"
              />
            }
          >
            <div
              className="row"
            >
              <div
                className="col-sm-3 row-label"
              >
                Port
              </div>
              <div
                className="col-sm-9"
                id="port"
              >
                80
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col-sm-3 row-label"
              >
                Protocol
              </div>
              <div
                className="col-sm-9"
              >
                HTTP
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col-sm-3 row-label"
              >
                Algorithm
              </div>
              <div
                className="col-sm-9"
              >
                Round Robin
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col-sm-3 row-label"
              >
                Session Stickiness
              </div>
              <div
                className="col-sm-9"
              >
                -- None --
              </div>
            </div>
          </Card>
        </section>,
        <Card
          className=""
          header={
            <CardHeader
              nav={
                <PrimaryButton
                  buttonClass="btn-default"
                  className="float-sm-right"
                  onClick={[Function]}
                  options={Array []}
                >
                  Add a Node
                </PrimaryButton>
              }
              title="Nodes"
            />
          }
        >
          <List
            className=""
          >
            <ListBody>
              <Table
                className="Table--secondary"
                columns={
                  Array [
                    Object {
                      "cellComponent": [Function],
                      "dataKey": "label",
                      "headerClassName": "NodeBalancerLabelColumn",
                      "label": "Label",
                      "tooltipEnabled": true,
                    },
                    Object {
                      "dataKey": "address",
                      "headerClassName": "AddressColumn",
                      "label": "Address",
                    },
                    Object {
                      "dataKey": "weight",
                      "headerClassName": "WeightColumn",
                      "label": "Weight",
                    },
                    Object {
                      "dataKey": "mode",
                      "formatFn": [Function],
                      "headerClassName": "ModeColumn",
                      "label": "Mode",
                    },
                    Object {
                      "dataKey": "status",
                      "formatFn": [Function],
                      "headerClassName": "ModeColumn",
                      "label": "Status",
                    },
                    Object {
                      "cellComponent": [Function],
                      "headerClassName": "ButtonColumn",
                      "onClick": [Function],
                      "text": "Edit",
                    },
                    Object {
                      "cellComponent": [Function],
                      "headerClassName": "ButtonColumn",
                      "onClick": [Function],
                      "text": "Delete",
                    },
                  ]
                }
                data={
                  Array [
                    Object {
                      "address": "192.168.4.5:80",
                      "config_id": 0,
                      "id": 1,
                      "label": "greatest_node_ever",
                      "mode": "accept",
                      "nodebalancer_id": 23,
                      "status": "online",
                      "weight": 40,
                    },
                  ]
                }
                disableHeader={false}
                noDataMessage="You have no nodes."
                selectedMap={Object {}}
              />
            </ListBody>
          </List>
        </Card>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Card
            className=""
            header={
              <CardHeader
                title="Summary"
              />
            }
          >
            <div
              className="row"
            >
              <div
                className="col-sm-3 row-label"
              >
                Port
              </div>
              <div
                className="col-sm-9"
                id="port"
              >
                80
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col-sm-3 row-label"
              >
                Protocol
              </div>
              <div
                className="col-sm-9"
              >
                HTTP
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col-sm-3 row-label"
              >
                Algorithm
              </div>
              <div
                className="col-sm-9"
              >
                Round Robin
              </div>
            </div>
            <div
              className="row"
            >
              <div
                className="col-sm-3 row-label"
              >
                Session Stickiness
              </div>
              <div
                className="col-sm-9"
              >
                -- None --
              </div>
            </div>
          </Card>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Port
                </div>
                <div
                  className="col-sm-9"
                  id="port"
                >
                  80
                </div>
              </div>,
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Protocol
                </div>
                <div
                  className="col-sm-9"
                >
                  HTTP
                </div>
              </div>,
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Algorithm
                </div>
                <div
                  className="col-sm-9"
                >
                  Round Robin
                </div>
              </div>,
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Session Stickiness
                </div>
                <div
                  className="col-sm-9"
                >
                  -- None --
                </div>
              </div>,
            ],
            "className": "",
            "header": <CardHeader
              title="Summary"
            />,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="col-sm-3 row-label"
                  >
                    Port
                  </div>,
                  <div
                    className="col-sm-9"
                    id="port"
                  >
                    80
                  </div>,
                ],
                "className": "row",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Port",
                    "className": "col-sm-3 row-label",
                  },
                  "ref": null,
                  "rendered": "Port",
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": 80,
                    "className": "col-sm-9",
                    "id": "port",
                  },
                  "ref": null,
                  "rendered": 80,
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="col-sm-3 row-label"
                  >
                    Protocol
                  </div>,
                  <div
                    className="col-sm-9"
                  >
                    HTTP
                  </div>,
                ],
                "className": "row",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Protocol",
                    "className": "col-sm-3 row-label",
                  },
                  "ref": null,
                  "rendered": "Protocol",
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "HTTP",
                    "className": "col-sm-9",
                  },
                  "ref": null,
                  "rendered": "HTTP",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="col-sm-3 row-label"
                  >
                    Algorithm
                  </div>,
                  <div
                    className="col-sm-9"
                  >
                    Round Robin
                  </div>,
                ],
                "className": "row",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Algorithm",
                    "className": "col-sm-3 row-label",
                  },
                  "ref": null,
                  "rendered": "Algorithm",
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Round Robin",
                    "className": "col-sm-9",
                  },
                  "ref": null,
                  "rendered": "Round Robin",
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="col-sm-3 row-label"
                  >
                    Session Stickiness
                  </div>,
                  <div
                    className="col-sm-9"
                  >
                    -- None --
                  </div>,
                ],
                "className": "row",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Session Stickiness",
                    "className": "col-sm-3 row-label",
                  },
                  "ref": null,
                  "rendered": "Session Stickiness",
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "-- None --",
                    "className": "col-sm-9",
                  },
                  "ref": null,
                  "rendered": "-- None --",
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
        "type": "section",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            null,
            <List
              className=""
            >
              <ListBody>
                <Table
                  className="Table--secondary"
                  columns={
                    Array [
                      Object {
                        "cellComponent": [Function],
                        "dataKey": "label",
                        "headerClassName": "NodeBalancerLabelColumn",
                        "label": "Label",
                        "tooltipEnabled": true,
                      },
                      Object {
                        "dataKey": "address",
                        "headerClassName": "AddressColumn",
                        "label": "Address",
                      },
                      Object {
                        "dataKey": "weight",
                        "headerClassName": "WeightColumn",
                        "label": "Weight",
                      },
                      Object {
                        "dataKey": "mode",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Mode",
                      },
                      Object {
                        "dataKey": "status",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Status",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Edit",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Delete",
                      },
                    ]
                  }
                  data={
                    Array [
                      Object {
                        "address": "192.168.4.5:80",
                        "config_id": 0,
                        "id": 1,
                        "label": "greatest_node_ever",
                        "mode": "accept",
                        "nodebalancer_id": 23,
                        "status": "online",
                        "weight": 40,
                      },
                    ]
                  }
                  disableHeader={false}
                  noDataMessage="You have no nodes."
                  selectedMap={Object {}}
                />
              </ListBody>
            </List>,
          ],
          "className": "",
          "header": <CardHeader
            nav={
              <PrimaryButton
                buttonClass="btn-default"
                className="float-sm-right"
                onClick={[Function]}
                options={Array []}
              >
                Add a Node
              </PrimaryButton>
            }
            title="Nodes"
          />,
        },
        "ref": null,
        "rendered": Array [
          null,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ListBody>
                <Table
                  className="Table--secondary"
                  columns={
                    Array [
                      Object {
                        "cellComponent": [Function],
                        "dataKey": "label",
                        "headerClassName": "NodeBalancerLabelColumn",
                        "label": "Label",
                        "tooltipEnabled": true,
                      },
                      Object {
                        "dataKey": "address",
                        "headerClassName": "AddressColumn",
                        "label": "Address",
                      },
                      Object {
                        "dataKey": "weight",
                        "headerClassName": "WeightColumn",
                        "label": "Weight",
                      },
                      Object {
                        "dataKey": "mode",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Mode",
                      },
                      Object {
                        "dataKey": "status",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Status",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Edit",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Delete",
                      },
                    ]
                  }
                  data={
                    Array [
                      Object {
                        "address": "192.168.4.5:80",
                        "config_id": 0,
                        "id": 1,
                        "label": "greatest_node_ever",
                        "mode": "accept",
                        "nodebalancer_id": 23,
                        "status": "online",
                        "weight": 40,
                      },
                    ]
                  }
                  disableHeader={false}
                  noDataMessage="You have no nodes."
                  selectedMap={Object {}}
                />
              </ListBody>,
              "className": "",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Table
                  className="Table--secondary"
                  columns={
                    Array [
                      Object {
                        "cellComponent": [Function],
                        "dataKey": "label",
                        "headerClassName": "NodeBalancerLabelColumn",
                        "label": "Label",
                        "tooltipEnabled": true,
                      },
                      Object {
                        "dataKey": "address",
                        "headerClassName": "AddressColumn",
                        "label": "Address",
                      },
                      Object {
                        "dataKey": "weight",
                        "headerClassName": "WeightColumn",
                        "label": "Weight",
                      },
                      Object {
                        "dataKey": "mode",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Mode",
                      },
                      Object {
                        "dataKey": "status",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Status",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Edit",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Delete",
                      },
                    ]
                  }
                  data={
                    Array [
                      Object {
                        "address": "192.168.4.5:80",
                        "config_id": 0,
                        "id": 1,
                        "label": "greatest_node_ever",
                        "mode": "accept",
                        "nodebalancer_id": 23,
                        "status": "online",
                        "weight": 40,
                      },
                    ]
                  }
                  disableHeader={false}
                  noDataMessage="You have no nodes."
                  selectedMap={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "Table--secondary",
                  "columns": Array [
                    Object {
                      "cellComponent": [Function],
                      "dataKey": "label",
                      "headerClassName": "NodeBalancerLabelColumn",
                      "label": "Label",
                      "tooltipEnabled": true,
                    },
                    Object {
                      "dataKey": "address",
                      "headerClassName": "AddressColumn",
                      "label": "Address",
                    },
                    Object {
                      "dataKey": "weight",
                      "headerClassName": "WeightColumn",
                      "label": "Weight",
                    },
                    Object {
                      "dataKey": "mode",
                      "formatFn": [Function],
                      "headerClassName": "ModeColumn",
                      "label": "Mode",
                    },
                    Object {
                      "dataKey": "status",
                      "formatFn": [Function],
                      "headerClassName": "ModeColumn",
                      "label": "Status",
                    },
                    Object {
                      "cellComponent": [Function],
                      "headerClassName": "ButtonColumn",
                      "onClick": [Function],
                      "text": "Edit",
                    },
                    Object {
                      "cellComponent": [Function],
                      "headerClassName": "ButtonColumn",
                      "onClick": [Function],
                      "text": "Delete",
                    },
                  ],
                  "data": Array [
                    Object {
                      "address": "192.168.4.5:80",
                      "config_id": 0,
                      "id": 1,
                      "label": "greatest_node_ever",
                      "mode": "accept",
                      "nodebalancer_id": 23,
                      "status": "online",
                      "weight": 40,
                    },
                  ],
                  "disableHeader": false,
                  "noDataMessage": "You have no nodes.",
                  "selectedMap": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <section>
            <Card
              className=""
              header={
                <CardHeader
                  title="Summary"
                />
              }
            >
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Port
                </div>
                <div
                  className="col-sm-9"
                  id="port"
                >
                  80
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Protocol
                </div>
                <div
                  className="col-sm-9"
                >
                  HTTP
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Algorithm
                </div>
                <div
                  className="col-sm-9"
                >
                  Round Robin
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Session Stickiness
                </div>
                <div
                  className="col-sm-9"
                >
                  -- None --
                </div>
              </div>
            </Card>
          </section>,
          <Card
            className=""
            header={
              <CardHeader
                nav={
                  <PrimaryButton
                    buttonClass="btn-default"
                    className="float-sm-right"
                    onClick={[Function]}
                    options={Array []}
                  >
                    Add a Node
                  </PrimaryButton>
                }
                title="Nodes"
              />
            }
          >
            <List
              className=""
            >
              <ListBody>
                <Table
                  className="Table--secondary"
                  columns={
                    Array [
                      Object {
                        "cellComponent": [Function],
                        "dataKey": "label",
                        "headerClassName": "NodeBalancerLabelColumn",
                        "label": "Label",
                        "tooltipEnabled": true,
                      },
                      Object {
                        "dataKey": "address",
                        "headerClassName": "AddressColumn",
                        "label": "Address",
                      },
                      Object {
                        "dataKey": "weight",
                        "headerClassName": "WeightColumn",
                        "label": "Weight",
                      },
                      Object {
                        "dataKey": "mode",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Mode",
                      },
                      Object {
                        "dataKey": "status",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Status",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Edit",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Delete",
                      },
                    ]
                  }
                  data={
                    Array [
                      Object {
                        "address": "192.168.4.5:80",
                        "config_id": 0,
                        "id": 1,
                        "label": "greatest_node_ever",
                        "mode": "accept",
                        "nodebalancer_id": 23,
                        "status": "online",
                        "weight": 40,
                      },
                    ]
                  }
                  disableHeader={false}
                  noDataMessage="You have no nodes."
                  selectedMap={Object {}}
                />
              </ListBody>
            </List>
          </Card>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Card
              className=""
              header={
                <CardHeader
                  title="Summary"
                />
              }
            >
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Port
                </div>
                <div
                  className="col-sm-9"
                  id="port"
                >
                  80
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Protocol
                </div>
                <div
                  className="col-sm-9"
                >
                  HTTP
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Algorithm
                </div>
                <div
                  className="col-sm-9"
                >
                  Round Robin
                </div>
              </div>
              <div
                className="row"
              >
                <div
                  className="col-sm-3 row-label"
                >
                  Session Stickiness
                </div>
                <div
                  className="col-sm-9"
                >
                  -- None --
                </div>
              </div>
            </Card>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <div
                  className="row"
                >
                  <div
                    className="col-sm-3 row-label"
                  >
                    Port
                  </div>
                  <div
                    className="col-sm-9"
                    id="port"
                  >
                    80
                  </div>
                </div>,
                <div
                  className="row"
                >
                  <div
                    className="col-sm-3 row-label"
                  >
                    Protocol
                  </div>
                  <div
                    className="col-sm-9"
                  >
                    HTTP
                  </div>
                </div>,
                <div
                  className="row"
                >
                  <div
                    className="col-sm-3 row-label"
                  >
                    Algorithm
                  </div>
                  <div
                    className="col-sm-9"
                  >
                    Round Robin
                  </div>
                </div>,
                <div
                  className="row"
                >
                  <div
                    className="col-sm-3 row-label"
                  >
                    Session Stickiness
                  </div>
                  <div
                    className="col-sm-9"
                  >
                    -- None --
                  </div>
                </div>,
              ],
              "className": "",
              "header": <CardHeader
                title="Summary"
              />,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="col-sm-3 row-label"
                    >
                      Port
                    </div>,
                    <div
                      className="col-sm-9"
                      id="port"
                    >
                      80
                    </div>,
                  ],
                  "className": "row",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Port",
                      "className": "col-sm-3 row-label",
                    },
                    "ref": null,
                    "rendered": "Port",
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": 80,
                      "className": "col-sm-9",
                      "id": "port",
                    },
                    "ref": null,
                    "rendered": 80,
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="col-sm-3 row-label"
                    >
                      Protocol
                    </div>,
                    <div
                      className="col-sm-9"
                    >
                      HTTP
                    </div>,
                  ],
                  "className": "row",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Protocol",
                      "className": "col-sm-3 row-label",
                    },
                    "ref": null,
                    "rendered": "Protocol",
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "HTTP",
                      "className": "col-sm-9",
                    },
                    "ref": null,
                    "rendered": "HTTP",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="col-sm-3 row-label"
                    >
                      Algorithm
                    </div>,
                    <div
                      className="col-sm-9"
                    >
                      Round Robin
                    </div>,
                  ],
                  "className": "row",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Algorithm",
                      "className": "col-sm-3 row-label",
                    },
                    "ref": null,
                    "rendered": "Algorithm",
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Round Robin",
                      "className": "col-sm-9",
                    },
                    "ref": null,
                    "rendered": "Round Robin",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="col-sm-3 row-label"
                    >
                      Session Stickiness
                    </div>,
                    <div
                      className="col-sm-9"
                    >
                      -- None --
                    </div>,
                  ],
                  "className": "row",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Session Stickiness",
                      "className": "col-sm-3 row-label",
                    },
                    "ref": null,
                    "rendered": "Session Stickiness",
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "-- None --",
                      "className": "col-sm-9",
                    },
                    "ref": null,
                    "rendered": "-- None --",
                    "type": "div",
                  },
                ],
                "type": "div",
              },
            ],
            "type": [Function],
          },
          "type": "section",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              null,
              <List
                className=""
              >
                <ListBody>
                  <Table
                    className="Table--secondary"
                    columns={
                      Array [
                        Object {
                          "cellComponent": [Function],
                          "dataKey": "label",
                          "headerClassName": "NodeBalancerLabelColumn",
                          "label": "Label",
                          "tooltipEnabled": true,
                        },
                        Object {
                          "dataKey": "address",
                          "headerClassName": "AddressColumn",
                          "label": "Address",
                        },
                        Object {
                          "dataKey": "weight",
                          "headerClassName": "WeightColumn",
                          "label": "Weight",
                        },
                        Object {
                          "dataKey": "mode",
                          "formatFn": [Function],
                          "headerClassName": "ModeColumn",
                          "label": "Mode",
                        },
                        Object {
                          "dataKey": "status",
                          "formatFn": [Function],
                          "headerClassName": "ModeColumn",
                          "label": "Status",
                        },
                        Object {
                          "cellComponent": [Function],
                          "headerClassName": "ButtonColumn",
                          "onClick": [Function],
                          "text": "Edit",
                        },
                        Object {
                          "cellComponent": [Function],
                          "headerClassName": "ButtonColumn",
                          "onClick": [Function],
                          "text": "Delete",
                        },
                      ]
                    }
                    data={
                      Array [
                        Object {
                          "address": "192.168.4.5:80",
                          "config_id": 0,
                          "id": 1,
                          "label": "greatest_node_ever",
                          "mode": "accept",
                          "nodebalancer_id": 23,
                          "status": "online",
                          "weight": 40,
                        },
                      ]
                    }
                    disableHeader={false}
                    noDataMessage="You have no nodes."
                    selectedMap={Object {}}
                  />
                </ListBody>
              </List>,
            ],
            "className": "",
            "header": <CardHeader
              nav={
                <PrimaryButton
                  buttonClass="btn-default"
                  className="float-sm-right"
                  onClick={[Function]}
                  options={Array []}
                >
                  Add a Node
                </PrimaryButton>
              }
              title="Nodes"
            />,
          },
          "ref": null,
          "rendered": Array [
            null,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ListBody>
                  <Table
                    className="Table--secondary"
                    columns={
                      Array [
                        Object {
                          "cellComponent": [Function],
                          "dataKey": "label",
                          "headerClassName": "NodeBalancerLabelColumn",
                          "label": "Label",
                          "tooltipEnabled": true,
                        },
                        Object {
                          "dataKey": "address",
                          "headerClassName": "AddressColumn",
                          "label": "Address",
                        },
                        Object {
                          "dataKey": "weight",
                          "headerClassName": "WeightColumn",
                          "label": "Weight",
                        },
                        Object {
                          "dataKey": "mode",
                          "formatFn": [Function],
                          "headerClassName": "ModeColumn",
                          "label": "Mode",
                        },
                        Object {
                          "dataKey": "status",
                          "formatFn": [Function],
                          "headerClassName": "ModeColumn",
                          "label": "Status",
                        },
                        Object {
                          "cellComponent": [Function],
                          "headerClassName": "ButtonColumn",
                          "onClick": [Function],
                          "text": "Edit",
                        },
                        Object {
                          "cellComponent": [Function],
                          "headerClassName": "ButtonColumn",
                          "onClick": [Function],
                          "text": "Delete",
                        },
                      ]
                    }
                    data={
                      Array [
                        Object {
                          "address": "192.168.4.5:80",
                          "config_id": 0,
                          "id": 1,
                          "label": "greatest_node_ever",
                          "mode": "accept",
                          "nodebalancer_id": 23,
                          "status": "online",
                          "weight": 40,
                        },
                      ]
                    }
                    disableHeader={false}
                    noDataMessage="You have no nodes."
                    selectedMap={Object {}}
                  />
                </ListBody>,
                "className": "",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <Table
                    className="Table--secondary"
                    columns={
                      Array [
                        Object {
                          "cellComponent": [Function],
                          "dataKey": "label",
                          "headerClassName": "NodeBalancerLabelColumn",
                          "label": "Label",
                          "tooltipEnabled": true,
                        },
                        Object {
                          "dataKey": "address",
                          "headerClassName": "AddressColumn",
                          "label": "Address",
                        },
                        Object {
                          "dataKey": "weight",
                          "headerClassName": "WeightColumn",
                          "label": "Weight",
                        },
                        Object {
                          "dataKey": "mode",
                          "formatFn": [Function],
                          "headerClassName": "ModeColumn",
                          "label": "Mode",
                        },
                        Object {
                          "dataKey": "status",
                          "formatFn": [Function],
                          "headerClassName": "ModeColumn",
                          "label": "Status",
                        },
                        Object {
                          "cellComponent": [Function],
                          "headerClassName": "ButtonColumn",
                          "onClick": [Function],
                          "text": "Edit",
                        },
                        Object {
                          "cellComponent": [Function],
                          "headerClassName": "ButtonColumn",
                          "onClick": [Function],
                          "text": "Delete",
                        },
                      ]
                    }
                    data={
                      Array [
                        Object {
                          "address": "192.168.4.5:80",
                          "config_id": 0,
                          "id": 1,
                          "label": "greatest_node_ever",
                          "mode": "accept",
                          "nodebalancer_id": 23,
                          "status": "online",
                          "weight": 40,
                        },
                      ]
                    }
                    disableHeader={false}
                    noDataMessage="You have no nodes."
                    selectedMap={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "Table--secondary",
                    "columns": Array [
                      Object {
                        "cellComponent": [Function],
                        "dataKey": "label",
                        "headerClassName": "NodeBalancerLabelColumn",
                        "label": "Label",
                        "tooltipEnabled": true,
                      },
                      Object {
                        "dataKey": "address",
                        "headerClassName": "AddressColumn",
                        "label": "Address",
                      },
                      Object {
                        "dataKey": "weight",
                        "headerClassName": "WeightColumn",
                        "label": "Weight",
                      },
                      Object {
                        "dataKey": "mode",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Mode",
                      },
                      Object {
                        "dataKey": "status",
                        "formatFn": [Function],
                        "headerClassName": "ModeColumn",
                        "label": "Status",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Edit",
                      },
                      Object {
                        "cellComponent": [Function],
                        "headerClassName": "ButtonColumn",
                        "onClick": [Function],
                        "text": "Delete",
                      },
                    ],
                    "data": Array [
                      Object {
                        "address": "192.168.4.5:80",
                        "config_id": 0,
                        "id": 1,
                        "label": "greatest_node_ever",
                        "mode": "accept",
                        "nodebalancer_id": 23,
                        "status": "online",
                        "weight": 40,
                      },
                    ],
                    "disableHeader": false,
                    "noDataMessage": "You have no nodes.",
                    "selectedMap": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
