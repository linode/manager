import React, { Component, PropTypes } from 'react';
import QRious from 'qrious';

import { ConfirmModalBody } from 'linode-components/modals';

import { showModal, hideModal } from '~/actions/modal';
import { confirmTFA } from '~/api/profile';
import {
  ModalFormGroup,
  FormGroupError,
  FormSummary,
  Input,
} from 'linode-components/forms';
import { dispatchOrStoreErrors } from '~/api/util';
import { EmitEvent } from 'linode-components/utils';


export class TwoFactorModal extends Component {
  constructor(props) {
    super(props);

    this.state = {
      tfaCode: '',
      errors: {},
    };
  }

  onSubmit = () => {
    const { dispatch } = this.props;
    const { tfaCode } = this.state;

    return dispatch(dispatchOrStoreErrors.call(this, [
      () => confirmTFA(tfaCode),
      ({ scratch }) => this.twoFactorScratchModal(scratch),
    ]));
  }

  onChange = ({ target: { name, value } }) => this.setState({ [name]: value })

  twoFactorScratchModal(scratch) {
    const title = 'Two-Factor Authentication Enabled';
    return (dispatch) => dispatch(showModal(title,
      <ConfirmModalBody
        buttonText="Ok"
        onOk={() => {
          EmitEvent('modal:submit', 'Modal', 'Ok', title);
          dispatch(hideModal());
        }}
        onCancel={() => {
          EmitEvent('modal:cancel', 'Modal', 'cancel', title);
          dispatch(hideModal());
        }}
      >
        <div>
          <p>
            Two-Factor authentication has been enabled. And a new emergency one-time use scratch
            code has been generated. Store this somewhere safe.
          </p>
          <div className="alert alert-warning">{scratch}</div>
        </div>
      </ConfirmModalBody>
    ));
  }

  render() {
    const { dispatch, secret, username } = this.props;
    const { tfaCode, errors } = this.state;
    const QRcode = new QRious({
      value: `otpauth://totp/LinodeManager%3A${username}?secret=${secret}`,
      level: 'H',
      size: 250,
    });
    const title = 'Two-Factor Authentication Enabled';

    return (
      <div className="TwoFactorModal">
        <ConfirmModalBody
          buttonText="Enable"
          buttonDisabledText="Enabling"
          onOk={() => {
            EmitEvent('modal:submit', 'Modal', 'Enable', title);
            this.onSubmit();
          }}
          onCancel={() => {
            EmitEvent('modal:cancel', 'Modal', 'cancel', title);
            dispatch(hideModal());
          }}
        >
          <div>
            <p>Scan this QR code to add your Linode account to your TFA app.</p>
            <div className="text-sm-center">
              <img src={QRcode.toDataURL()} alt={secret} />
            </div>
            <p>Please enter the token generated by your TFA app.</p>
            <ModalFormGroup errors={errors} id="tfaCode" name="tfa_code" label="Token">
              <Input
                id="tfaCode"
                name="tfaCode"
                value={tfaCode}
                placeholder="901928"
                onChange={this.onChange}
              />
              <FormGroupError errors={errors} name="tfa_code" inline={false} />
            </ModalFormGroup>
            <small>
              If your TFA app does not have a QR scanner, you can use this secret key.
            </small>
            <div className="alert alert-warning">{secret}</div>
          </div>
        </ConfirmModalBody>
        <FormSummary errors={errors} />
      </div>
    );
  }
}

TwoFactorModal.propTypes = {
  dispatch: PropTypes.func.isRequired,
  secret: PropTypes.string.isRequired,
  username: PropTypes.string.isRequired,
};
