{
    "script": "return (function executeClientSide(fn, sArr, args) {\n var cb = arguments[arguments.length - 1];\n var i = 0;\n var sArgs = [];\n var use, value, xp, cs, tn, res, j, arg;\n\n if (typeof document.querySelectorAll === 'undefined') {\n document.querySelectorAll = function (selector) {\n var doc = document;\n var head = doc.documentElement.firstChild;\n var styleTag = doc.createElement('STYLE');\n\n head.appendChild(styleTag);\n doc.__qsaels = [];\n\n styleTag.styleSheet.cssText = selector + '{x:expression(document.__qsaels.push(this))}';\n window.scrollBy(0, 0);\n\n return doc.__qsaels;\n };\n }\n\n while ((use = sArr[i++]) && (value = sArr[i++])) {\n arg = [];\n xp = cs = tn = null;\n switch (use) {\n case 'partial link text':\n xp = '//a[contains(text(),\"' + value + '\")]';\n break;\n case 'link text':\n xp = '//a[text()=\"' + value + '\"]';\n break;\n case 'xpath':\n xp = value;\n break;\n case 'id':\n cs = '#' + value;\n break;\n case 'name':\n cs = '[name=\"' + value + '\"]';\n break;\n case 'tag name':\n tn = value;\n break;\n case 'css selector':\n cs = value;\n break;\n default:\n throw new Error('Could not evaluate selector: Invalid strategy ' + use);\n }\n\n if (xp) {\n res = document.evaluate(xp, document, null, 0, null);\n\n value = res.iterateNext();\n while (value) {\n arg.push(value);\n value = res.iterateNext();\n }\n } else if (tn || cs) {\n res = tn ? document.getElementsByTagName(tn) : document.querySelectorAll(cs);\n for (j = 0; j < res.length; ++j) {\n arg.push(res[j]);\n }\n }\n sArgs.push(arg);\n }\n\n var parameter = args && sArgs.concat(args) || sArgs;\n if (parameter.length === 0 || parameter.length === 1 && parameter[0].length === 0) {\n if (typeof cb === 'function') {\n return cb('NoSuchElement') && new Error('NoSuchElement');\n }\n throw new Error('NoSuchElement');\n }\n\n parameter.push(arguments[arguments.length - 1]);\n\n return fn.apply(window, parameter);\n})(function getBoundingRect(elems) {\n  return elems.map(function (elem) {\n var boundingRect = elem.getBoundingClientRect();\n return {\n   top: boundingRect.top,\n   right: boundingRect.right,\n   bottom: boundingRect.bottom,\n   left: boundingRect.left\n };\n  });\n},[\"css selector\",\"[data-qa-group-cta-body]\"],[], arguments[arguments.length - 1]);",
    "args": []
}