diff --git a/node_modules/sanitize-html/dist/index.js b/node_modules/sanitize-html/dist/index.js
index af039ba..9889c26 100644
--- a/node_modules/sanitize-html/dist/index.js
+++ b/node_modules/sanitize-html/dist/index.js
@@ -54,6 +54,7 @@ var VALID_HTML_ATTRIBUTE_NAME = /^[^\0\t\n\f\r /<=>]+$/;
 
 function sanitizeHtml(html, options, _recursing) {
   var result = '';
+  var tempResult = '';
 
   function Frame(tag, attribs) {
     var that = this;
@@ -139,6 +140,7 @@ function sanitizeHtml(html, options, _recursing) {
   var skipMap = {};
   var transformMap = {};
   var skipText = false;
+  var escapeDepth = 0;
   var skipTextDepth = 0;
 
   var parser = new htmlparser.Parser({
@@ -147,6 +149,9 @@ function sanitizeHtml(html, options, _recursing) {
         skipTextDepth++;
         return;
       }
+      if (escapeDepth > 0) {
+        escapeDepth++;
+      }
       var frame = new Frame(name, attribs);
       stack.push(frame);
 
@@ -179,16 +184,27 @@ function sanitizeHtml(html, options, _recursing) {
 
       if (options.allowedTags && options.allowedTags.indexOf(name) === -1) {
         skip = true;
-        if (nonTextTagsArray.indexOf(name) !== -1) {
-          skipText = true;
-          skipTextDepth = 1;
+        if (!options.escapeDisallowedTags) {
+          // We don't want to skip disallowedTags tags, just escape them
+          if (nonTextTagsArray.indexOf(name) !== -1) {
+            skipText = true;
+            skipTextDepth = 1;
+          }
+          skipMap[depth] = true;
         }
-        skipMap[depth] = true;
       }
       depth++;
       if (skip) {
         // We want the contents but not this tag
-        return;
+        if (!options.escapeDisallowedTags) {
+          // We want the contents but not this tag
+          return;
+        }
+        if (escapeDepth === 0) {
+          tempResult = result;
+          result = '';
+          escapeDepth++;
+        }
       }
       result += '<' + name;
       if (!allowedAttributesMap || has(allowedAttributesMap, name) || allowedAttributesMap['*']) {
@@ -363,6 +379,10 @@ function sanitizeHtml(html, options, _recursing) {
       }
       if (options.selfClosing.indexOf(name) !== -1) {
         result += " />";
+        if (escapeDepth > 0 && --escapeDepth === 0) {
+          result = tempResult + escapeHtml(result);
+          tempResult = '';
+        }
       } else {
         result += ">";
         if (frame.innerText && !hasText && !options.textFilter) {
@@ -413,6 +433,7 @@ function sanitizeHtml(html, options, _recursing) {
         }
       }
 
+      var shouldEscape = escapeDepth > 0 && --escapeDepth === 0;
       var frame = stack.pop();
       if (!frame) {
         // Do not crash on bad markup
@@ -444,6 +465,10 @@ function sanitizeHtml(html, options, _recursing) {
       }
 
       result += "</" + name + ">";
+      if (shouldEscape) {
+        result = tempResult + escapeHtml(result);
+        tempResult = '';
+      }
     }
   }, options.parser);
   parser.write(html);
@@ -455,6 +480,9 @@ function sanitizeHtml(html, options, _recursing) {
     if (typeof s !== 'string') {
       s = s + '';
     }
+    if (escapeDepth > 0) {
+      return s;
+    }
     if (options.parser.decodeEntities) {
       s = s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\>/g, '&gt;');
       if (quote) {
@@ -607,6 +635,7 @@ sanitizeHtml.defaults = {
     // and if you do the URL is checked for safety
     img: ['src']
   },
+  escapeDisallowedTags: false,
   // Lots of these won't come up by default because we don't allow them
   selfClosing: ['img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta'],
   // URL schemes we permit
diff --git a/node_modules/sanitize-html/dist/sanitize-html.js b/node_modules/sanitize-html/dist/sanitize-html.js
index 7dbc194..427150a 100644
--- a/node_modules/sanitize-html/dist/sanitize-html.js
+++ b/node_modules/sanitize-html/dist/sanitize-html.js
@@ -55,6 +55,7 @@ var VALID_HTML_ATTRIBUTE_NAME = /^[^\0\t\n\f\r /<=>]+$/;
 
 function sanitizeHtml(html, options, _recursing) {
   var result = '';
+  var tempResult = '';
 
   function Frame(tag, attribs) {
     var that = this;
@@ -140,6 +141,7 @@ function sanitizeHtml(html, options, _recursing) {
   var skipMap = {};
   var transformMap = {};
   var skipText = false;
+  var escapeDepth = 0;
   var skipTextDepth = 0;
 
   var parser = new htmlparser.Parser({
@@ -148,6 +150,9 @@ function sanitizeHtml(html, options, _recursing) {
         skipTextDepth++;
         return;
       }
+      if (escapeDepth > 0) {
+        escapeDepth++;
+      }
       var frame = new Frame(name, attribs);
       stack.push(frame);
 
@@ -180,16 +185,26 @@ function sanitizeHtml(html, options, _recursing) {
 
       if (options.allowedTags && options.allowedTags.indexOf(name) === -1) {
         skip = true;
-        if (nonTextTagsArray.indexOf(name) !== -1) {
-          skipText = true;
-          skipTextDepth = 1;
+        if (!options.escapeDisallowedTags) {
+          // We don't want to skip disallowedTags tags, just escape them
+          if (nonTextTagsArray.indexOf(name) !== -1) {
+            skipText = true;
+            skipTextDepth = 1;
+          }
+          skipMap[depth] = true;
         }
-        skipMap[depth] = true;
       }
       depth++;
       if (skip) {
-        // We want the contents but not this tag
-        return;
+        if (!options.escapeDisallowedTags) {
+          // We want the contents but not this tag
+          return;
+        }
+        if (escapeDepth === 0) {
+          tempResult = result;
+          result = '';
+          escapeDepth++;
+        }
       }
       result += '<' + name;
       if (!allowedAttributesMap || has(allowedAttributesMap, name) || allowedAttributesMap['*']) {
@@ -364,6 +379,10 @@ function sanitizeHtml(html, options, _recursing) {
       }
       if (options.selfClosing.indexOf(name) !== -1) {
         result += " />";
+        if (escapeDepth > 0 && --escapeDepth === 0) {
+          result = tempResult + escapeHtml(result);
+          tempResult = '';
+        }
       } else {
         result += ">";
         if (frame.innerText && !hasText && !options.textFilter) {
@@ -414,6 +433,7 @@ function sanitizeHtml(html, options, _recursing) {
         }
       }
 
+      var shouldEscape = escapeDepth > 0 && --escapeDepth === 0;
       var frame = stack.pop();
       if (!frame) {
         // Do not crash on bad markup
@@ -445,6 +465,10 @@ function sanitizeHtml(html, options, _recursing) {
       }
 
       result += "</" + name + ">";
+      if (shouldEscape) {
+        result = tempResult + escapeHtml(result);
+        tempResult = '';
+      }
     }
   }, options.parser);
   parser.write(html);
@@ -456,6 +480,9 @@ function sanitizeHtml(html, options, _recursing) {
     if (typeof s !== 'string') {
       s = s + '';
     }
+    if (escapeDepth > 0) {
+      return s;
+    }
     if (options.parser.decodeEntities) {
       s = s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\>/g, '&gt;');
       if (quote) {
@@ -608,6 +635,7 @@ sanitizeHtml.defaults = {
     // and if you do the URL is checked for safety
     img: ['src']
   },
+  escapeDisallowedTags: false,
   // Lots of these won't come up by default because we don't allow them
   selfClosing: ['img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta'],
   // URL schemes we permit
